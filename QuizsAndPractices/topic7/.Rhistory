pch = '.',
cex = 4,
xlab = 'Range 1:229860',
ylab = 'mixscore ADM'
)
text(-515, 18, labels = 'Unshuffled')
## par(mfrow = c(3, 1))
plot(x=1:end, y=unshuffled[1:end],
ylim = c(0,20),
pch = '.',
cex = 4,
xlab = 'Range 1:229860',
ylab = 'mixscore ADM'
)
text(1000, 16, labels = 'Unshuffled')
## par(mfrow = c(3, 1))
plot(x=1:end, y=unshuffled[1:end],
ylim = c(0,20),
pch = '.',
cex = 4,
xlab = 'Range 1:229860',
ylab = 'mixscore ADM'
)
text(-1000, 16, labels = 'Unshuffled')
## par(mfrow = c(3, 1))
plot(x=1:end, y=unshuffled[1:end],
ylim = c(0,20),
pch = '.',
cex = 4,
xlab = 'Range 1:229860',
ylab = 'mixscore ADM'
)
text(5000, 16, labels = 'Unshuffled')
## par(mfrow = c(3, 1))
plot(x=1:end, y=unshuffled[1:end],
ylim = c(0,20),
pch = '.',
cex = 4,
xlab = 'Range 1:229860',
ylab = 'mixscore ADM'
)
text(10000, 18, labels = 'Unshuffled')
png(file = '1129_shuffledandunshuffled.png', width = 10, height = 10, units = 'in', res = 200)
end <- length(unshuffled)
par(mfrow = c(2, 2))
## par(mfrow = c(3, 1))
plot(x=1:end, y=unshuffled[1:end],
ylim = c(0,20),
pch = '.',
cex = 4,
xlab = 'Range 1:229860',
ylab = 'mixscore ADM'
)
text(10000, 18, labels = 'Unshuffled')
## grid.newpage()
plot(x=1:end, y=shuffled1[1:end],
ylim = c(0,20),
pch = '.',
cex = 4,
xlab = 'Range 1:229860',
ylab = 'mixscore ADM'
)
text(10000, 18, labels = 'Shuffled #1')
plot(x=1:end, y=shuffled2[1:end],
ylim = c(0,20),
pch = '.',
cex = 4,
xlab = 'Range 1:229860',
ylab = 'mixscore ADM'
)
text(10000, 18, labels = 'Shuffled #2')
## grid.newpage()
plot(x=1:end, y=shuffled3[1:end],
ylim = c(0,20),
pch = '.',
cex = 4,
xlab = 'Range 1:229860',
ylab = 'mixscore ADM'
)
text(10000, 18, labels = 'Shuffled #3')
dev.off()
png(file = '1129_shuffledandunshuffled.png', width = 10, height = 10, units = 'in', res = 200)
end <- length(unshuffled)
par(mfrow = c(2, 2))
## par(mfrow = c(3, 1))
plot(x=1:end, y=unshuffled[1:end],
ylim = c(0,20),
pch = '.',
cex = 4,
xlab = 'Range 1:229860',
ylab = 'mixscore ADM'
)
text(20000, 18, labels = 'Unshuffled')
## grid.newpage()
plot(x=1:end, y=shuffled1[1:end],
ylim = c(0,20),
pch = '.',
cex = 4,
xlab = 'Range 1:229860',
ylab = 'mixscore ADM'
)
text(20000, 18, labels = 'Shuffled #1')
plot(x=1:end, y=shuffled2[1:end],
ylim = c(0,20),
pch = '.',
cex = 4,
xlab = 'Range 1:229860',
ylab = 'mixscore ADM'
)
text(20000, 18, labels = 'Shuffled #2')
## grid.newpage()
plot(x=1:end, y=shuffled3[1:end],
ylim = c(0,20),
pch = '.',
cex = 4,
xlab = 'Range 1:229860',
ylab = 'mixscore ADM'
)
text(20000, 18, labels = 'Shuffled #3')
dev.off()
png(file = '1129_shuffledandunshuffled.png', width = 10, height = 10, units = 'in', res = 200)
end <- length(unshuffled)
par(mfrow = c(2, 2))
## par(mfrow = c(3, 1))
plot(x=1:end, y=unshuffled[1:end],
ylim = c(0,20),
pch = '.',
cex = 4,
xlab = 'Range 1:229860',
ylab = 'mixscore ADM'
)
text(50000, 18, labels = 'Unshuffled')
## grid.newpage()
plot(x=1:end, y=shuffled1[1:end],
ylim = c(0,20),
pch = '.',
cex = 4,
xlab = 'Range 1:229860',
ylab = 'mixscore ADM'
)
text(50000, 18, labels = 'Shuffled #1')
plot(x=1:end, y=shuffled2[1:end],
ylim = c(0,20),
pch = '.',
cex = 4,
xlab = 'Range 1:229860',
ylab = 'mixscore ADM'
)
text(50000, 18, labels = 'Shuffled #2')
## grid.newpage()
plot(x=1:end, y=shuffled3[1:end],
ylim = c(0,20),
pch = '.',
cex = 4,
xlab = 'Range 1:229860',
ylab = 'mixscore ADM'
)
text(50000, 18, labels = 'Shuffled #3')
dev.off()
png(file = '1129_shuffledandunshuffled.png', width = 10, height = 10, units = 'in', res = 200)
end <- length(unshuffled)
par(mfrow = c(2, 2))
par(mar = rep(4, 4))
## par(mfrow = c(3, 1))
plot(x=1:end, y=unshuffled[1:end],
ylim = c(0,20),
pch = '.',
cex = 4,
xlab = 'Range 1:229860',
ylab = 'mixscore ADM'
)
text(50000, 18, labels = 'Unshuffled')
## grid.newpage()
plot(x=1:end, y=shuffled1[1:end],
ylim = c(0,20),
pch = '.',
cex = 4,
xlab = 'Range 1:229860',
ylab = 'mixscore ADM'
)
text(50000, 18, labels = 'Shuffled #1')
plot(x=1:end, y=shuffled2[1:end],
ylim = c(0,20),
pch = '.',
cex = 4,
xlab = 'Range 1:229860',
ylab = 'mixscore ADM'
)
text(50000, 18, labels = 'Shuffled #2')
## grid.newpage()
plot(x=1:end, y=shuffled3[1:end],
ylim = c(0,20),
pch = '.',
cex = 4,
xlab = 'Range 1:229860',
ylab = 'mixscore ADM'
)
text(50000, 18, labels = 'Shuffled #3')
dev.off()
png(file = '1129_shuffledandunshuffled.png', width = 10, height = 10, units = 'in', res = 200)
end <- length(unshuffled)
par(mfrow = c(2, 2))
par(mar = rep(5, 4))
## par(mfrow = c(3, 1))
plot(x=1:end, y=unshuffled[1:end],
ylim = c(0,20),
pch = '.',
cex = 4,
xlab = 'Range 1:229860',
ylab = 'mixscore ADM'
)
text(50000, 18, labels = 'Unshuffled')
## grid.newpage()
plot(x=1:end, y=shuffled1[1:end],
ylim = c(0,20),
pch = '.',
cex = 4,
xlab = 'Range 1:229860',
ylab = 'mixscore ADM'
)
text(50000, 18, labels = 'Shuffled #1')
plot(x=1:end, y=shuffled2[1:end],
ylim = c(0,20),
pch = '.',
cex = 4,
xlab = 'Range 1:229860',
ylab = 'mixscore ADM'
)
text(50000, 18, labels = 'Shuffled #2')
## grid.newpage()
plot(x=1:end, y=shuffled3[1:end],
ylim = c(0,20),
pch = '.',
cex = 4,
xlab = 'Range 1:229860',
ylab = 'mixscore ADM'
)
text(50000, 18, labels = 'Shuffled #3')
dev.off()
## par(mfrow = c(3, 1))
plot(x=1:end, y=unshuffled[1:end],
ylim = c(0,20),
pch = '.',
cex = 4,
xlab = 'Range 1:229860',
ylab = 'mixscore ADM'
)
text(50000, 18, labels = 'Unshuffled')
text(250000, 18, labels = 'Unshuffled')
text(200000, 18, labels = 'Unshuffled')
## grid.newpage()
plot(x=1:end, y=shuffled3[1:end],
ylim = c(0,20),
pch = '.',
cex = 4,
xlab = 'Range 1:229860',
ylab = 'mixscore ADM'
)
text(200000, 18, labels = 'Shuffled #3')
plot(x=1:end, y=shuffled2[1:end],
ylim = c(0,20),
pch = '.',
cex = 4,
xlab = 'Range 1:229860',
ylab = 'mixscore ADM'
)
text(200000, 18, labels = 'Shuffled #2')
## par(mfrow = c(3, 1))
plot(x=1:end, y=unshuffled[1:end],
ylim = c(0,20),
pch = '.',
cex = 4,
xlab = 'Range 1:229860',
ylab = 'mixscore ADM'
)
text(200000, 18, labels = 'Unshuffled')
setwd("D:/GitHub/biostats721/QuizsAndPractices/topic7")
rm(list=ls())
in_dir <- ''        # Set to location of .RData file from Topic 6 Part 3
out_dir <- ''       # Set to location where you want to save report doc
load(paste(in_dir,'sim_allns_fitobjects.RData',sep=''))
a <- c(1.2, 2, -0.46, 1.345)
round(a,2)
# - For a integer vector in R, the round() function will not ...
b <- 1:5
round(b,2)
# - To get around this formatting issue for table generation, use the formatC()
#   function which "forces" the format by converting the output to character mode
formatC(b,digits=2,format='f')
names(fit.n50)
fit.n50$bias.t1
head(fit.n50)
str(fit.n50)
prop <- 0
which.prop <- which(seq(0,0.2,by=0.01)==prop)
which.prop
seq(0, 0.2, by=0.01)==prop
fit.object$bias.t1[which.prop],digits=3,format='f'
fit.object$bias.t1[which.prop]
fit.object <- fit.n50
fit.object$bias.t1[which.prop]
formatC(fit.object$bias.t1[which.prop],digits=3,format='f')
cell <- paste(formatC(fit.object$bias.t1[which.prop],digits=3,format='f'),
' (',
formatC(fit.object$mse.t1[which.prop],digits=3,format='f'),
')',sep='')
cell
fit.object <- fit.n50
prop <- 0
which.prop <- which(seq(0,0.2,by=0.01)==prop)
cell1 <- paste(formatC(fit.object$bias.t1[which.prop],digits=3,format='f'),
' (',
formatC(fit.object$mse.t1[which.prop],digits=3,format='f'),
')',sep='')
cell2 <- paste(formatC(fit.object$bias.t2[which.prop],digits=3,format='f'),
' (',
formatC(fit.object$mse.t2[which.prop],digits=3,format='f'),
')',sep='')
cell3 <- paste(formatC(fit.object$bias.t3[which.prop],digits=3,format='f'),
' (',
formatC(fit.object$mse.t3[which.prop],digits=3,format='f'),
')',sep='')
row <- c(cell1,cell2,cell3)
row
# - Step 3: Functional-ize the code to create a single row and re-run for all
#           rows in the table shell
make.row <- function(fit.object,prop){
which.prop <- which(seq(0,0.2,by=0.01)==prop)
cell1 <- paste(formatC(fit.object$bias.t1[which.prop],digits=3,format='f'),
' (',
formatC(fit.object$mse.t1[which.prop],digits=3,format='f'),
')',sep='')
cell2 <- paste(formatC(fit.object$bias.t2[which.prop],digits=3,format='f'),
' (',
formatC(fit.object$mse.t2[which.prop],digits=3,format='f'),
')',sep='')
cell3 <- paste(formatC(fit.object$bias.t3[which.prop],digits=3,format='f'),
' (',
formatC(fit.object$mse.t3[which.prop],digits=3,format='f'),
')',sep='')
row <- c(cell1,cell2,cell3)
return(list(row=row))}
make.row(fit.n50,0)$row         # Same row used in developement
make.row(fit.n50,0.05)$row      # For n=50 and prop=0.05 ...
make.row(fit.n100,0.1)$row      # For n=100 and prop=0.10 ...
# Exporting Table ----------------------------------------------------------------
# Option 1: By "hand"
# - Run make.row fuction, print results, and copy-and-paste into table shell
make.row(fit.n50,0)$row
make.row(fit.n50,0.05)$row
make.row(fit.n50,0.10)$row
make.row(fit.n100,0)$row
make.row(fit.n100,0.05)$row
make.row(fit.n100,0.10)$row
make.row(fit.n150,0)$row
make.row(fit.n150,0.05)$row
make.row(fit.n150,0.10)$row
table.object <- NULL
sampsize.n50 <- rep(NA,3)            # Section 1 of Table Shell
table.object <- rbind(table.object,sampsize.n50)
prop.out.00 <- make.row(fit.n50,0)$row
table.object <- rbind(table.object,prop.out.00)
prop.out.05 <- make.row(fit.n50,0.05)$row
table.object <- rbind(table.object,prop.out.05)
prop.out.10 <- make.row(fit.n50,0.10)$row
table.object <- rbind(table.object,prop.out.10)
sampsize.n100 <- rep(NA,3)           # Section 2 of Table Shell
table.object <- rbind(table.object,sampsize.n100)
prop.out.00 <- make.row(fit.n100,0)$row
table.object <- rbind(table.object,prop.out.00)
prop.out.05 <- make.row(fit.n100,0.05)$row
table.object <- rbind(table.object,prop.out.05)
prop.out.10 <- make.row(fit.n100,0.10)$row
table.object <- rbind(table.object,prop.out.10)
sampsize.n150 <- rep(NA,3)           # Section 3 of Table Shell
table.object <- rbind(table.object,sampsize.n150)
prop.out.00 <- make.row(fit.n150,0)$row
table.object <- rbind(table.object,prop.out.00)
prop.out.05 <- make.row(fit.n150,0.05)$row
table.object <- rbind(table.object,prop.out.05)
prop.out.10 <- make.row(fit.n150,0.10)$row
table.object <- rbind(table.object,prop.out.10)
colnames(table.object) <- c('Mean','20% Trimmed Mean','Median')
table.object
# Step 2: Export table data object to a .csv file
write.csv(table.object,
paste(out_dir,'table.csv',sep=''),
quote=FALSE, na='')
# Option 3: Create a table and export directly to .docx file using RMarkdown
# - Compile code in table_option3.Rmd
# --------------------------------------------------------------------------------
# End of Program
# Develop Code to Create Table ---------------------------------------------------
# A few notes about rounding in R ...
# - For a numeric vector in R, the round() function will work as expected ...
a <- c(1.2, 2, -0.46, 1.345)
round(a,2)
# - For a integer vector in R, the round() function will not ...
b <- 1:5
round(b,2)
# - To get around this formatting issue for table generation, use the formatC()
#   function which "forces" the format by converting the output to character mode
formatC(b,digits=2,format='f')
# Recall the structure of the stored simulation output:
names(fit.n50)
fit.n50$bias.t1
# - Step 1: Develop code to create single cell in the table shell
# - Start with the n=50 and prop of outliers = 0 for the mean cell
fit.object <- fit.n50
prop <- 0
which.prop <- which(seq(0,0.2,by=0.01)==prop)
cell <- paste(formatC(fit.object$bias.t1[which.prop],digits=3,format='f'),
' (',
formatC(fit.object$mse.t1[which.prop],digits=3,format='f'),
')',sep='')
cell
# - Step 2: Develop code to create a single row in the table shell
# - Start with the n=50 and prop of outliers = 0 row (i.e. all estimators)
fit.object <- fit.n50
prop <- 0
which.prop <- which(seq(0,0.2,by=0.01)==prop)
cell1 <- paste(formatC(fit.object$bias.t1[which.prop],digits=3,format='f'),
' (',
formatC(fit.object$mse.t1[which.prop],digits=3,format='f'),
')',sep='')
cell2 <- paste(formatC(fit.object$bias.t2[which.prop],digits=3,format='f'),
' (',
formatC(fit.object$mse.t2[which.prop],digits=3,format='f'),
')',sep='')
cell3 <- paste(formatC(fit.object$bias.t3[which.prop],digits=3,format='f'),
' (',
formatC(fit.object$mse.t3[which.prop],digits=3,format='f'),
')',sep='')
row <- c(cell1,cell2,cell3)
row
# - Step 3: Functional-ize the code to create a single row and re-run for all
#           rows in the table shell
make.row <- function(fit.object,prop){
which.prop <- which(seq(0,0.2,by=0.01)==prop)
cell1 <- paste(formatC(fit.object$bias.t1[which.prop],digits=3,format='f'),
' (',
formatC(fit.object$mse.t1[which.prop],digits=3,format='f'),
')',sep='')
cell2 <- paste(formatC(fit.object$bias.t2[which.prop],digits=3,format='f'),
' (',
formatC(fit.object$mse.t2[which.prop],digits=3,format='f'),
')',sep='')
cell3 <- paste(formatC(fit.object$bias.t3[which.prop],digits=3,format='f'),
' (',
formatC(fit.object$mse.t3[which.prop],digits=3,format='f'),
')',sep='')
row <- c(cell1,cell2,cell3)
return(list(row=row))}
make.row(fit.n50,0)$row         # Same row used in developement
make.row(fit.n50,0.05)$row      # For n=50 and prop=0.05 ...
make.row(fit.n100,0.1)$row      # For n=100 and prop=0.10 ...
# Exporting Table ----------------------------------------------------------------
# Option 1: By "hand"
# - Run make.row fuction, print results, and copy-and-paste into table shell
make.row(fit.n50,0)$row
make.row(fit.n50,0.05)$row
make.row(fit.n50,0.10)$row
make.row(fit.n100,0)$row
make.row(fit.n100,0.05)$row
make.row(fit.n100,0.10)$row
make.row(fit.n150,0)$row
make.row(fit.n150,0.05)$row
make.row(fit.n150,0.10)$row
# Option 2: Create a data object that mirrors table shell and export to .csv file
# Step 1: Recreate the table shell row-by-row and stack row objectss to create
#         a single data object that exactly mirrors the format of the table shell
table.object <- NULL
sampsize.n50 <- rep(NA,3)            # Section 1 of Table Shell
table.object <- rbind(table.object,sampsize.n50)
prop.out.00 <- make.row(fit.n50,0)$row
table.object <- rbind(table.object,prop.out.00)
prop.out.05 <- make.row(fit.n50,0.05)$row
table.object <- rbind(table.object,prop.out.05)
prop.out.10 <- make.row(fit.n50,0.10)$row
table.object <- rbind(table.object,prop.out.10)
sampsize.n100 <- rep(NA,3)           # Section 2 of Table Shell
table.object <- rbind(table.object,sampsize.n100)
prop.out.00 <- make.row(fit.n100,0)$row
table.object <- rbind(table.object,prop.out.00)
prop.out.05 <- make.row(fit.n100,0.05)$row
table.object <- rbind(table.object,prop.out.05)
prop.out.10 <- make.row(fit.n100,0.10)$row
table.object <- rbind(table.object,prop.out.10)
sampsize.n150 <- rep(NA,3)           # Section 3 of Table Shell
table.object <- rbind(table.object,sampsize.n150)
prop.out.00 <- make.row(fit.n150,0)$row
table.object <- rbind(table.object,prop.out.00)
prop.out.05 <- make.row(fit.n150,0.05)$row
table.object <- rbind(table.object,prop.out.05)
prop.out.10 <- make.row(fit.n150,0.10)$row
table.object <- rbind(table.object,prop.out.10)
colnames(table.object) <- c('Mean','20% Trimmed Mean','Median')
table.object
# Step 2: Export table data object to a .csv file
write.csv(table.object,
paste(out_dir,'table.csv',sep=''),
quote=FALSE, na='')
# Step 2: Export table data object to a .csv file
write.csv(table.object,
paste(out_dir,'table.csv',sep=''),
quote=FALSE, na='')
# Step 2: Export table data object to a .csv file
write.csv(table.object,
paste(out_dir,'table2.csv',sep=''),
quote=FALSE, na='')
table.object
# Background
