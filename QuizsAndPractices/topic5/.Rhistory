box()
hist(women,
breaks = 10,
col = "red",
xlab = paste("women data", min.w, max.w),
ylab = "frequency"
)
text(19,30,labels='women mean')
box()
hist(women,
breaks = 10,
col = "red",
xlab = paste("women data", min.w, max.w),
ylab = "frequency"
)
text(19,200,labels='women mean')
box()
hist(women,
breaks = 10,
col = "red",
xlab = paste("women data", min.w, max.w),
ylab = "frequency"
)
text(19,200,labels=paste('mean', mean.w) )
box()
hist(women,
breaks = 10,
col = "red",
xlab = paste("women data", min.w, max.w),
ylab = "frequency"
)
text(9,200,labels=paste('mean', mean.w) )
box()
hist(women,
breaks = 10,
col = "red",
xlab = paste("women data", min.w, max.w),
ylab = "frequency"
)
text(19,200,labels=paste('mean', mean.w) )
box()
par(mfrow = c(1, 2))
mean.w = round(mean(women), 2)
min.w = round(min(women),2)
max.w = round(max(women), 2)
hist(women,
breaks = 10,
col = "red",
xlab = paste("women data", min.w, max.w),
ylab = "frequency"
)
text(19,200,labels=paste('mean', mean.w) )
box()
mean.m = round(mean(men), 2)
min.m = round(min(men), 2)
max.m = round(max(men), 2)
hist(men,
breaks = 10,
col = "blue",
xlab = "for men",
ylab = "frequency"
)
text(19,200,labels=paste('mean', mean.m) )
box()
par(mfrow = c(1, 2))
mean.w = round(mean(women), 2)
min.w = round(min(women),2)
max.w = round(max(women), 2)
hist(women,
breaks = 10,
col = "red",
xlab = paste("women data", min.w, max.w),
ylab = "frequency"
)
text(19,200,labels=paste('mean=', mean.w) )
box()
mean.m = round(mean(men), 2)
min.m = round(min(men), 2)
max.m = round(max(men), 2)
hist(men,
breaks = 10,
col = "blue",
xlab = "for men",
ylab = "frequency"
)
text(19,170,labels=paste('mean=', mean.m) )
box()
hist(women,
breaks = 5,
col = "red",
xlab = paste("women data", min.w, max.w),
ylab = "frequency"
)
par(mfrow = c(1, 2))
mean.w = round(mean(women), 2)
min.w = round(min(women),2)
max.w = round(max(women), 2)
hist(women,
breaks = 15,
col = "red",
xlab = paste("women data", min.w, max.w),
ylab = "frequency"
)
text(19,200,labels=paste('mean=', mean.w) )
box()
mean.m = round(mean(men), 2)
min.m = round(min(men), 2)
max.m = round(max(men), 2)
hist(men,
breaks = 10,
col = "blue",
xlab = "for men",
ylab = "frequency"
)
text(19,170,labels=paste('mean=', mean.m) )
box()
par(mfrow = c(1, 2))
mean.w = round(mean(women), 2)
min.w = round(min(women),2)
max.w = round(max(women), 2)
hist(women,
breaks = 10,
col = "red",
xlab = paste("women data", min.w, max.w),
ylab = "frequency"
)
text(19,200,labels=paste('mean=', mean.w) )
box()
mean.m = round(mean(men), 2)
min.m = round(min(men), 2)
max.m = round(max(men), 2)
hist(men,
breaks = 10,
col = "blue",
xlab = "for men",
ylab = "frequency"
)
text(19,170,labels=paste('mean=', mean.m) )
box()
par(mfrow = c(1, 1))
plot(norm.01$x,norm.01$y,
type="l",col='sienna2',
ylim=range(norm.01$y,norm.02$y,norm.21$y,norm.22$y),
xlim=range(norm.01$x,norm.02$x,norm.21$x,norm.22$x),
main='Normal Dist with Mu=0 and Sigma=1',
ylab='Density',
xlab='Random Variable Values')
plot(norm.21$x,norm.21$y,col='sienna3',
type="l",
ylim=range(norm.01$y,norm.02$y,norm.21$y,norm.22$y),
xlim=range(norm.01$x,norm.02$x,norm.21$x,norm.22$x),
main='Normal Dist with Mu=2 and Sigma=1',
ylab='Density',
xlab='Random Variable Values')
hist(women,
breaks = 10,
col = "red",
main = "For women",
xlab = paste("women data", min.w, max.w),
ylab = "frequency"
)
text(19,200,labels=paste('mean=', mean.w) )
box()
hist(men,
breaks = 10,
col = "blue",
main = "For men",
xlab = paste("men", min.m, max.m),
ylab = "frequency"
)
text(19,170,labels=paste('mean=', mean.m) )
box()
boxplot(exam~group,
main='Exam Scores',
ylab='Score out of 100 points',
names=c('Exam 1','Exam 2','Exam 3'),
range=0,
col=colors()[637:639])
exam.means <- apply(data[,2:4],2,mean,na.rm=TRUE)
lines(group, exam.means, type='p', pch='*')
lines(group,exam.means,type='p',
pch='*',cex=5,col='darkorange2')
lines(1:3,exam.means,type='p',
pch='*',cex=5,col='darkorange2')
boxplot(exam~group,
main='Exam Scores',
ylab='Score out of 100 points',
names=c('Exam 1','Exam 2','Exam 3'),
range=0,
col=colors()[637:639])
exam.means <- apply(data[,2:4],2,mean,na.rm=TRUE)
lines(1:3,exam.means,type='p',
pch='*',cex=5,col='darkorange2')
text(1.5,50,labels='* denotes the sample mean')
pdf('AllExamsBoxplot.pdf')
boxplot(exam~group,
main='Exam Scores',
ylab='Score out of 100 points',
names=c('Exam 1','Exam 2','Exam 3'),
range=0,
col=colors()[637:639])
exam.means <- apply(data[,2:4],2,mean,na.rm=TRUE)
lines(1:3,exam.means,type='p',
pch='*',cex=5,col='darkorange2')
text(1.5,50,labels='* denotes the sample mean')
dev.off()
set.seed(987)
d <- rchisq(1000,10)
boxplot(d,
horizontal = T)
abline(h = 400, col = "red")
abline(h = 10, col = "red")
abline(h = 2.5, col = "red", lwd = 2)
boxplot(d,
horizontal = T)
abline(h = 2.5, col = "red", lwd = 2)
abline(h = 10, col = "red", lwd = 2)
line(10, col = "blue")
hist(d,
main = 'Histogram of d',
xlab = 'd'
)
abline(h = 10, col = "red", lwd = 2)
abline(v = 10, col = "red", lwd = 2)
boxplot(d,
horizontal = T)
abline(v = 10, col = "red", lwd = 2)
hist(d,
main = 'Histogram of d',
xlab = 'd'
)
abline(v = 10, col = "red", lwd = 2)
hist(d,
main = 'Histogram of d',
xlab = 'd'
)
abline(v = 10, col = "red", lwd = 4)
par(mfrow = c(2, 1))
boxplot(d,
horizontal = T)
abline(v = 10, col = "red", lwd = 2)
box()
hist(d,
main = 'Histogram of d',
xlab = 'd'
)
abline(v = 10, col = "red", lwd = 4)
box()
par(mfrow = c(2, 1))
boxplot(d,
horizontal = T)
abline(v = 10, col = "red", lwd = 4)
box()
hist(d,
main = 'Histogram of d',
xlab = 'd'
)
abline(v = 10, col = "red", lwd = 4)
box()
boxplot(d,
horizontal = T)
abline(v = mean(d), col = "red", lwd = 4)
par(mfrow = c(2, 1))
boxplot(d,
horizontal = T)
abline(v = mean(d), col = "red", lwd = 4)
box()
hist(d,
main = 'Histogram of d',
xlab = 'd'
)
abline(v = mean(d), col = "red", lwd = 4)
box()
unshuffled <- read.table("D:\GitHub/ADM_Statistic_Data/shuffled_local_ancestry_out/mixscore_shuffled0.out", header = F)
unshuffled <- unshuffled$V1
unshuffled <- read.table("D:/GitHub/ADM_Statistic_Data/shuffled_local_ancestry_out/mixscore_shuffled0.out", header = F)
unshuffled <- unshuffled$V1
shuffled1 <- read.table("D:/GitHub/ADM_Statistic_Data/shuffled_local_ancestry_out/mixscore_shuffled1.out", header = F)
shuffled1 <- shuffled1$V1
unshuffled <- read.table("D:/GitHub/ADM_Statistic_Data/shuffled_local_ancestry_out/mixscore_shuffled0.out", header = F)
unshuffled <- unshuffled$V1
shuffled1 <- read.table("D:/GitHub/ADM_Statistic_Data/shuffled_local_ancestry_out/mixscore_shuffled1.out", header = F)
shuffled1 <- shuffled1$V1
shuffled2 <- read.table("D:/GitHub/ADM_Statistic_Data/shuffled_local_ancestry_out/mixscore_shuffled2.out", header = F)
shuffled2 <- shuffled2$V1
shuffled3 <- read.table("D:/GitHub/ADM_Statistic_Data/shuffled_local_ancestry_out/mixscore_shuffled3.out", header = F)
shuffled3 <- shuffled3$V1
par(mfrow = c(2, 2))
end <- 10000
plot(x = 1:end, y = unshuffled[1:end],
main = 'Unshuffled')
plot(x = 1:end, y = shuffled1[1:end],
main = 'Unshuffled')
plot(x = 1:end, y = shuffled2[1:end],
main = 'Unshuffled')
plot(x = 1:end, y = shuffled3[1:end],
main = 'Unshuffled')
par(mfrow = c(2, 2))
end <- 50000
plot(x = 1:end, y = unshuffled[1:end],
main = 'Unshuffled')
plot(x = 1:end, y = shuffled1[1:end],
main = 'Unshuffled')
plot(x = 1:end, y = shuffled2[1:end],
main = 'Unshuffled')
plot(x = 1:end, y = shuffled3[1:end],
main = 'Unshuffled')
plot(x = 1:end, y = unshuffled[1:end],
xlab = paste('1:', end),
main = 'Unshuffled')
plot(x = 1:end, y = shuffled1[1:end],
xlab = paste('1:', end),
main = 'Unshuffled')
plot(x = 1:end, y = shuffled2[1:end],
xlab = paste('1:', end),
main = 'Unshuffled')
plot(x = 1:end, y = shuffled3[1:end],
xlab = paste('1:', end),
main = 'Unshuffled')
par(mfrow = c(2, 2))
end <- 50000
plot(x = 1:end, y = unshuffled[1:end],
xlab = paste('1:', end),
main = 'Unshuffled')
plot(x = 1:end, y = shuffled1[1:end],
xlab = paste('1:', end),
main = 'shuffled #1')
plot(x = 1:end, y = shuffled2[1:end],
xlab = paste('1:', end),
main = 'shuffled #2')
plot(x = 1:end, y = shuffled3[1:end],
xlab = paste('1:', end),
main = 'shuffled #3')
par(mfrow = c(2, 2))
end <- 100000
plot(x = 1:end, y = unshuffled[1:end],
xlab = paste('1:', end),
main = 'Unshuffled')
plot(x = 1:end, y = shuffled1[1:end],
xlab = paste('1:', end),
main = 'shuffled #1')
plot(x = 1:end, y = shuffled2[1:end],
xlab = paste('1:', end),
main = 'shuffled #2')
plot(x = 1:end, y = shuffled3[1:end],
xlab = paste('1:', end),
main = 'shuffled #3')
plot(x = 1:end, y = unshuffled[1:end],
xlab = paste('range 1:', end),
ylab = 'mixscore by SNP',
main = 'Unshuffled')
plot(x = 1:end, y = shuffled1[1:end],
xlab = paste('range 1:', end),
ylab = 'mixscore by SNP',
main = 'shuffled #1')
plot(x = 1:end, y = shuffled2[1:end],
xlab = paste('range 1:', end),
ylab = 'mixscore by SNP',
main = 'shuffled #2')
plot(x = 1:end, y = shuffled3[1:end],
xlab = paste('range 1:', end),
ylab = 'mixscore by SNP',
main = 'shuffled #3')
tail(shuffled1)
plot(x = 1:length(shuffled1), y = shuffled1)
par(mfrow = c(1, 1))
plot(x = 1:length(shuffled1), y = shuffled1)
summary(shuffled1)
summary(unshuffled)
# Simulation Factors:
seed <- 123         # Random number generator seed
mu <- 0             # Population mean (will NOT vary in sim)
sigma <- 1          # Population std dev (will not vary in sim)
n <- 50             # Sample size
out.cut <- 3        # Cut point for defining outlier in norm distb
prop.out <- 0.15    # Proportion of outliers in the sample
# Simulation Code:
# (A) Generate population values
#     - In this sim, will create the population ONCE and then
#       take repeated samples from it.
#     - Not interested in varying the population distribution
#       or parameters in this sim (but could if wanted to)
set.seed(seed)
pop <- rnorm(100000,mu,sigma)
# (B) Divide population into outliers and non-outliers
#     - Outliers defined as values greater than out.cut
#     - Because we are working with a normal distribution
#       for the population, outliers are usually < -3
#       or > 3 (here, just focus on the upper end).
outliers <- pop[which(pop>out.cut)]
not.outliers <- pop[which(pop<=out.cut)]
pop
outliers
not.outliers
n.out <- round(n*prop.out,0)
n.not <- n-n.out
samp <- c(sample(not.outliers,n.not,replace=FALSE),
sample(outliers,n.out,replace=FALSE))
# (D) Calculate the value of each estimator based on the
#     selected sample (and check the value)
t1.mean <- mean(samp)
t2.tmean <- mean(samp,trim=0.20)
t3.med <- median(samp)
t1.mean
t2.tmean
t3.med
# Simulation Factors:
seed <- 123
mu <- 0
sigma <- 1
n <- 50
out.cut <- 3
prop.out <- 0.15
no.runs <- 10            # Only new factor - now want to repeat code above
# for R simulation runs.
# Simulation Code:
# (A) Change: Set up storage
#     - Now that we are going to run the code developed above
#       for R simulation runs, need to store the output from
#       each run (i.e. the value of the 3 estimators)
#     - Set up 'empty' vectors; I like using NAs so I can tell
#       later on if something didn't work because there should
#       be no missing values
t1.mean <- rep(NA,no.runs)
t2.tmean <- rep(NA,no.runs)
t3.med <- rep(NA,no.runs)
set.seed(seed)
pop <- rnorm(100000,mu,sigma)
outliers <- pop[which(pop>out.cut)]
not.outliers <- pop[which(pop<=out.cut)]
n.out <- round(n*prop.out,0)
n.not <- n-n.out
# (B) Change: Use a FOR loop to generate multiple samples
#     and to compute (and store) the value of each
#     estimator for each sample
for (i in 1:no.runs) {
samp <- c(sample(not.outliers,n.not,replace=FALSE),
sample(outliers,n.out,replace=FALSE))
t1.mean[i] <- mean(samp)
t2.tmean[i] <- mean(samp,trim=0.20)
t3.med[i] <- median(samp)
}
# (C) Change: Check the output - should not be a vector of
#     estimated values from each sample randomly generated
#     during the simulation runs
t1.mean
t2.tmean
t3.med
samp <- c(sample(not.outliers,n.not,replace=FALSE),
sample(outliers,n.out,replace=FALSE))
samp
# Simulation Factors:
seed <- 123         # Random number generator seed
mu <- 0             # Population mean (will NOT vary in sim)
sigma <- 1          # Population std dev (will not vary in sim)
n <- 50             # Sample size
out.cut <- 3        # Cut point for defining outlier in norm distb
prop.out <- 0.15    # Proportion of outliers in the sample
fit.n50 <- sim.func(seed=123,
mu=0,
sigma=1,
n=50,
out.cut=3,
no.runs=10,
prop.out=seq(0.0,0.20,by=0.05))
sim.func <- function(seed,mu,sigma,n,out.cut,no.runs,prop.out) {
t1.mean <- matrix(NA,no.runs,length(prop.out))
t2.tmean <- matrix(NA,no.runs,length(prop.out))
t3.med <- matrix(NA,no.runs,length(prop.out))
col.names <- rep(NA,length(prop.out))
set.seed(seed)
pop <- rnorm(100000,mu,sigma)
outliers <- pop[which(pop>out.cut)]
not.outliers <- pop[which(pop<=out.cut)]
for (j in 1:length(prop.out)) {
n.out <- round(n*prop.out[j],0)
n.not <- n-n.out
col.names[j] <- paste('Prop=',prop.out[j],sep='')
for (i in 1:no.runs) {
samp <- c(sample(not.outliers,n.not,replace=FALSE),
sample(outliers,n.out,replace=FALSE))
t1.mean[i,j] <- mean(samp)
t2.tmean[i,j] <- mean(samp,trim=0.20)
t3.med[i,j] <- median(samp)
}}
colnames(t1.mean) <- col.names
colnames(t2.tmean) <- col.names
colnames(t3.med) <- col.names
bias.t1 <- apply(t1.mean-mu,2,mean)
mse.t1 <- apply((t1.mean-mu)^2,2,mean)
bias.t2 <- apply(t2.tmean-mu,2,mean)
mse.t2 <- apply((t2.tmean-mu)^2,2,mean)
bias.t3 <- apply(t3.med-mu,2,mean)
mse.t3 <- apply((t3.med-mu)^2,2,mean)
return(list(t1.mean=t1.mean,
bias.t1=bias.t1,
mse.t1=mse.t1,
t2.tmean=t2.tmean,
bias.t2=bias.t2,
mse.t2=mse.t2,
t3.med=t3.med,
bias.t3=bias.t3,
mse.t3=mse.t3))
}
fit.n50 <- sim.func(seed=123,
mu=0,
sigma=1,
n=50,
out.cut=3,
no.runs=10,
prop.out=seq(0.0,0.20,by=0.05))
fit.n50
