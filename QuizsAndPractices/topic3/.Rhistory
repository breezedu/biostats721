days <- days+1
cells <- N0*2^(days*f)
growth <- rbind(growth,c(days,cells))}
colnames(growth) <- c('Days','No of Cells')
growth
setwd("D:/GitHub/biostats721/QuizsAndPractices/topic3")
psych <- read.csv('psych_scores.csv')
pat.ID <- 'M44M'  # <-- Change for patient ID of interest
results <- psych[psych$ID==pat.ID,-1]  # <-- Get test results
results <- unlist(results)             # <-- Create a vector with test results
results
results <- psych[psych$ID==pat.ID,-1]  # <-- Get test results
results
biom <- read.csv('biomarker_levels.csv')
# Part (a)
levels <- as.matrix(biom[,3:22])
low <- levels<200
high <- levels>1000
levels
low
high
cleaned <- c(levels)       # <-- Vectorize data
cleaned
# Part (a)
levels <- as.matrix(biom[,3:22])
low <- levels<200
high <- levels>1000
cleaned <- c(levels)       # <-- Vectorize data
cleaned[c(low)] <- 200
cleaned[c(high)] <- 1000
biom2 <- matrix(cleaned,50,20)
colnames(biom2) <- colnames(levels)
biom2 <- data.frame(biom[,1:2],biom2)
c(low)
cleaned(c(low))
cleaned[c(low)]
levels
biom2
glu <- read.csv('base_glucose.csv')
samp1 <- NULL  # Instantiate data objects to store sample data values
samp2 <- NULL
s1 <- 0        # Instantiate sample sds at 0
s2 <- 0
counter <- 4   # Instantiate counter at 4 (min sample size to est sd is 2)
while(abs(60-s1)>5 | abs(60-s2)>5){
who <- 1:counter
samp1 <- glu$base_glu[who[who%%2!=0]]
samp2 <- glu$base_glu[who[who%%2==0]]
s1 <- sd(samp1)
s2 <- sd(samp2)
counter <- counter+2}
# Examine results of while loop
counter
length(samp1)
length(samp2)
sd(samp1)
sd(samp2)
# Check that while loop worked correctly
who <- 1:(counter-4)              # One iteration too few
sd(glu$base_glu[who[who%%2!=0]])
sd(glu$base_glu[who[who%%2==0]])
who <- 1:(counter-2)              # Required sample size
sd(glu$base_glu[who[who%%2!=0]])
sd(glu$base_glu[who[who%%2==0]])
who <- 1:counter                  # One iteration too many
sd(glu$base_glu[who[who%%2!=0]])
sd(glu$base_glu[who[who%%2==0]])
set.seed(123)
ID <- 1:99
what <- c(rep('I',66),rep('C',33))
what
Trt.Assign <- sample(what,99,replace=FALSE)
Trt.Assign
Scheme1 <- data.frame(ID,Trt.Assign)
# - Check that code works:
head(Scheme1)
tail(Scheme1)
table(Scheme1$Trt.Assign)
# Part (b)
# - Solution using a looping structure
set.seed(456)
ID <- 1:99
Block <- rep(NA,99)
Trt.Assign <- rep(NA,99)
for (block in 1:33) {
what <- sample(c('I','I','C'),3,replace=FALSE)
Trt.Assign[(3*block-2):(3*block)] <- what
Block[(3*block-2):(3*block)] <- rep(block,3)}
Scheme2 <- data.frame(ID,Block,Trt.Assign)
# Part (d)
X <- c(NA,-1,0.5,NA,NA,6)
new.x <- NULL
len <- length(X)
for( item in X){
if(!is.na(item)) new.x <- c(new.x, item)
}
new.x
# Part (b)
# - If you didn't part (a), add a counter to the loop
xValue <- 10
count <- 0
while (xValue > 0) {
count <- count + 1
xValue <- xValue - 0.5
print(xValue)
}
count
# Part (b)
risk.CRPgender <- ifelse(hsCRP>9,'High Risk',
ifelse((gender=='Male' & hsCRP>7.1),'High Risk',
ifelse((gender=='Female' & hsCRP>7.1),'Moderate Risk',
'Low Risk')))
data$risk.CRPgender <- risk.CRPgender
data
# - Univariate table based on new criteria
table(data$risk.CRPgender,useNA='ifany')
# - Crosstab comparing old vs. new criteria
table(data$risk.CRP,data$risk.CRPgender,useNA='ifany')
x <- c(7, 12, 9, 15, NA, 8, 14, NA, 2, 9,1,0)
y <- matrix(x,3,4)
# Part (b)
out2 <- x[2:length(x)]-x[1:(length(x)-1)]
out2
# Part (c)
# - Note: Need to use dim(x) instead of 3 and 4 to make it generalizable!
out3 <- matrix(NA,dim(y)[1],dim(y)[2]-1)
for (i in 1:dim(y)[1]){
for (j in 1:(dim(y)[2]-1)) {
out3[i,j] <- y[i,j+1]-y[i,j] }}
out3
INFO <- matrix(c(1,3,NA,4,NA,2,2,2,2,2,0,-5,NA,1,4),5,3)
MISS <- NULL
INFO
row <- dim(INFO)[1]
col <- dim(INFO)[2]
INFO
INFO <- matrix(c(1,3,NA,4,NA,2,2,2,2,2,0,-5,NA,1,4),5,3)
INFO
MISS <- NULL
row <- dim(INFO)[1]
col <- dim(INFO)[2]
for( i in 1:col){
count <- 0
for( j in 1:row){
if(is.na(INFO[j, i]) {
count <- count +1
}
}
MISS <- c(MISS, count)
}
MISS
MISS <- NULL
row <- dim(INFO)[1]
col <- dim(INFO)[2]
for( i in 1:col){
count <- 0
for( j in 1:row){
if(is.na(INFO[j, i]) {
count <- count +1
print(count)
}
}
MISS <- c(MISS, count)
}
row
col
INFO
INFO <- matrix(c(1,3,NA,4,NA,2,2,2,2,2,0,-5,NA,1,4),5,3)
INFO
MISS <- NULL
row <- dim(INFO)[1]
col <- dim(INFO)[2]
row
col
for( i in 1:col){
count <- 0
for( j in 1:row){
if( is.na(INFO[j, i] ) )
count <- count +1
}
MISS <- c(MISS, count)
}
MISS
# Question 2
INFO <- matrix(c(1,3,NA,4,NA,2,2,2,2,2,0,-5,NA,1,4),6,5)
INFO
row <- dim(INFO)[1]
col <- dim(INFO)[2]
row
col
for( i in 1:col){
count <- 0
for( j in 1:row){
if( is.na(INFO[j, i] ) )
count <- count +1
}
MISS <- c(MISS, count)
}
MISS
if( length(MISS) < 1){
print('NO missing values in INFO')
} else {
print(MISS)
}
INFO <- matrix(1:12,2,6)
INFO
row <- dim(INFO)[1]
row
col <- dim(INFO)[2]
col
for( i in 1:col){
count <- 0
for( j in 1:row){
if( is.na(INFO[j, i] ) )
count <- count +1
}
MISS <- c(MISS, count)
}
if( length(MISS) < 1){
print('NO missing values in INFO')
} else {
print(MISS)
}
length(MISS)
INFO <- matrix(1:12,2,6)
INFO
row <- dim(INFO)[1]
col <- dim(INFO)[2]
row
col
for( i in 1:col){
count <- 0
for( j in 1:row){
if( is.na(INFO[j, i] ) )
count <- count +1
}
MISS <- c(MISS, count)
}
length(MISS)
# Question 2
INFO <- matrix(c(1,3,NA,4,NA,2,2,2,2,2,0,-5,NA,1,4),6,5)
INFO
row <- dim(INFO)[1]
col <- dim(INFO)[2]
row
col
for( i in 1:col){
count <- 0
for( j in 1:row){
if( is.na(INFO[j, i] ) )
count <- count +1
}
MISS <- c(MISS, count)
}
MISS
# Question 1
INFO <- matrix(c(1,3,NA,4,NA,2,2,2,2,2,0,-5,NA,1,4),5,3)
INFO
MISS <- NULL
row <- dim(INFO)[1]
col <- dim(INFO)[2]
row
col
for( i in 1:col){
count <- 0
for( j in 1:row){
if( is.na(INFO[j, i] ) )
count <- count +1
}
MISS <- c(MISS, count)
}
MISS
INFO <- matrix(c(1,3,NA,4,NA,2,2,2,2,2,0,-5,NA,1,4),6,5)
INFO
row <- dim(INFO)[1]
col <- dim(INFO)[2]
row
col
for( i in 1:col){
count <- 0
for( j in 1:row){
if( is.na(INFO[j, i] ) )
# Question 2
INFO <- matrix(c(1,3,NA,4,NA,2,2,2,2,2,0,-5,NA,1,4),6,5)
INFO
row <- dim(INFO)[1]
col <- dim(INFO)[2]
row
col
for( i in 1:col){
count <- 0
for( j in 1:row){
if( is.na(INFO[j, i] ) )
count <- count +1
}
MISS <- c(MISS, count)
}
MISS
# Question 2
INFO <- matrix(c(1,3,NA,4,NA,2,2,2,2,2,0,-5,NA,1,4),6,5)
INFO
row <- dim(INFO)[1]
col <- dim(INFO)[2]
row
col
for( i in 1:col){
count <- 0
for( j in 1:row){
if( is.na(INFO[j, i] ) )
count <- count +1
}
MISS <- c(MISS, count)
}
MISS
MISS <- NULL
row <- dim(INFO)[1]
col <- dim(INFO)[2]
row
col
for( i in 1:col){
count <- 0
for( j in 1:row){
if( is.na(INFO[j, i] ) )
count <- count +1
}
MISS <- c(MISS, count)
}
MISS
INFO <- matrix(1:12,2,6)
INFO
MISS <- NULL
row <- dim(INFO)[1]
col <- dim(INFO)[2]
row
col
for( i in 1:col){
count <- 0
for( j in 1:row){
if( is.na(INFO[j, i] ) )
count <- count +1
}
MISS <- c(MISS, count)
}
length(MISS)
## check if the length of MISS is zero
if( length(MISS) < 1){
print('NO missing values in INFO')
} else {
print(MISS)
}
MISS <- NULL}
INFO <- matrix(c(1,3,NA,4,NA,2,2,2,2,2,0,-5,NA,1,4),5,3)
INFO
MISS <- NULL
row <- dim(INFO)[1]
col <- dim(INFO)[2]
row
col
for( i in 1:col){
count <- 0
for( j in 1:row){
if( is.na(INFO[j, i] ) )
count <- count +1
}
MISS <- c(MISS, count)
}
MISS
}
INFO <- matrix(c(1,3,NA,4,NA,2,2,2,2,2,0,-5,NA,1,4),5,3)
INFO
MISS <- NULL
row <- dim(INFO)[1]
col <- dim(INFO)[2]
row
col
for( i in 1:col){
count <- 0
for( j in 1:row){
if( is.na(INFO[j, i] ) )
count <- count +1
}
MISS <- c(MISS, count)
}
MISS
# Question 2
INFO <- matrix(c(1,3,NA,4,NA,2,2,2,2,2,0,-5,NA,1,4),6,5)
INFO
MISS <- NULL
row <- dim(INFO)[1]
col <- dim(INFO)[2]
row
col
for( i in 1:col){
count <- 0
for( j in 1:row){
if( is.na(INFO[j, i] ) )
count <- count +1
}
MISS <- c(MISS, count)
}
MISS
INFO <- matrix(1:12,2,6)
INFO
MISS <- NULL
row <- dim(INFO)[1]
col <- dim(INFO)[2]
row
col
for( i in 1:col){
count <- 0
for( j in 1:row){
if( is.na(INFO[j, i] ) )
count <- count +1
}
MISS <- c(MISS, count)
}
length(MISS)
## check if the length of MISS is zero
if( length(MISS) < 1){
print('NO missing values in INFO')
} else {
print(MISS)
}
## check if the length of MISS is zero
if( sum(MISS) < 1){
print('NO missing values in INFO')
} else {
print(MISS)
}
INFO <- matrix(c(1,3,NA,4,NA,2,2,2,2,2,0,-5,NA,1,4),5,3)
INFO
MISS <- NULL
row <- dim(INFO)[1]
col <- dim(INFO)[2]
row
col
for( i in 1:col){
count <- 0
for( j in 1:row){
if( is.na(INFO[j, i] ) )
count <- count +1
}
MISS <- c(MISS, count)
}
length(MISS)
## check if the sum of MISS is zero
if( sum(MISS) < 1){
print('NO missing values in INFO')
} else {
print(MISS)
}
MISSING <- NULL
INFO <- matrix(c(1,3,NA,4,NA,2,2,2,2,2,0,-5,NA,1,4),5,3)
INFO
MISSING <- NULL
row <- dim(INFO)[1]
col <- dim(INFO)[2]
row
col
for( i in 1:col){
count <- 0
for( j in 1:row){
if( is.na(INFO[j, i] ) )
count <- count +1
}
MISSING <- c(MISSING, count)
}
MISSING
INFO <- matrix(1:12,2,6)
INFO
MISSING <- NULL
row <- dim(INFO)[1]
col <- dim(INFO)[2]
row
col
for( i in 1:col){
count <- 0
for( j in 1:row){
if( is.na(INFO[j, i] ) )
count <- count +1
}
MISSING <- c(MISSING, count)
}
##length(MISS)
## check if the sum of MISS is zero
if( sum(MISSING) < 1){
print('NO missing values in INFO')
} else {
print(MISSING)
}
INFO <- matrix(c(1,3,NA,4,NA,2,2,2,2,2,0,-5,NA,1,4),5,3)
INFO
MISSING <- NULL
row <- dim(INFO)[1]
col <- dim(INFO)[2]
row
col
for( i in 1:col){
count <- 0
for( j in 1:row){
if( is.na(INFO[j, i] ) )
count <- count +1
}
MISSING <- c(MISSING, count)
}
##length(MISS)
## check if the sum of MISS is zero
if( sum(MISSING) < 1){
print('NO missing values in INFO')
} else {
print(MISSING)
}
