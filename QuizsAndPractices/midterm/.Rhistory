y <- matrix(x,3,4)
y
# Part (a)
# - Note: Need to use length(x) instead of 12 to make it generalizable!
out1<- rep(NA,length(x)-1)
for (i in 1:(length(x)-1)){ out1[i] <- x[i+1]-x[i]  }
out1
# Part (b)
out2 <- x[2:length(x)]-x[1:(length(x)-1)]
out2
# Part (c)
# - Note: Need to use dim(x) instead of 3 and 4 to make it generalizable!
out3 <- matrix(NA,dim(y)[1],dim(y)[2]-1)
for (i in 1:dim(y)[1]){
for (j in 1:(dim(y)[2]-1)) {
out3[i,j] <- y[i,j+1]-y[i,j] }}
out3
###
row <- dim(y)[1]
col <- dim(y)[2]-1
out.new <- matrix(NA, row, col)
for(i in 1:row){
for( j in 1:col){
out.new[i,j] <- y[i,j+1] - y[i,j]
}
}
out.new
# Part (d)
out4 <- y[,2:dim(y)[2]]-y[,1:(dim(y)[2]-1)]
out4
# Question 5:
# Part (a)
N0 <- 2
f <- 0.5
days <- 0
cells <- 0
while (cells < 180){
days <- days+1
cells <- N0*2^(days*f) }
days
# Part (b)
N0 <- 2
f <- 0.5
days <- 0
cells <- 0
growth <- NULL
while (cells < 180){
days <- days+1
cells <- N0*2^(days*f)
growth <- rbind(growth,c(days,cells))}
colnames(growth) <- c('Days','No of Cells')
growth
days.vec <- NULL
cells.vec <- NULL
while (cells < 180){
days <- days + 1
cells <- N0 * 2^(days*f)
days.vec <- c(days.vec, days)
cells.vec <- c(cells.vec, cells)
}
data.frame(days.vec, cells.vec)
days.vec
# Part (b)
N0 <- 2
f <- 0.5
days <- 0
cells <- 0
days.vec <- NULL
cells.vec <- NULL
while (cells < 180){
days <- days + 1
cells <- N0 * 2^(days*f)
days.vec <- c(days.vec, days)
cells.vec <- c(cells.vec, cells)
}
data.frame(days.vec, cells.vec)
growth <- NULL
while (cells < 180){
days <- days+1
cells <- N0*2^(days*f)
growth <- rbind(growth,c(days,cells))}
colnames(growth) <- c('Days','No of Cells')
growth
# Part (b)
N0 <- 2
f <- 0.5
days <- 0
cells <- 0
growth <- NULL
while (cells < 180){
days <- days+1
cells <- N0*2^(days*f)
growth <- rbind(growth,c(days,cells))}
colnames(growth) <- c('Days','No of Cells')
growth
cbind(days.vec, cell.vec)
cbind(days.vec, cells.vec)
new.growth <- cbind(days.vec, cells.vec)
colnames(new.growth) <- c('daysss', 'Num of Cells')
new.growth
output <- data.frame(days.vec, cells.vec)
colnames(output) <- c('daysss', 'Num of Cells')
output
# Part (b)
N0 <- 2
f <- 0.5
days <- 0
cells <- 0
growth <- NULL
while (cells < 180){
days <- days+1
cells <- N0*2^(days*f)
growth <- rbind(growth,c(days,cells))}
colnames(growth) <- c('Days','No of Cells')
growth
# Part (a)
# - Note: Need to use length(x) instead of 12 to make it generalizable!
out1<- rep(NA,length(x)-1)
for (i in 1:(length(x)-1)){ out1[i] <- x[i+1]-x[i]  }
out1
# Part (b)
out2 <- x[2:length(x)]-x[1:(length(x)-1)]
out2
# Part (c)
# - Note: Need to use dim(x) instead of 3 and 4 to make it generalizable!
out3 <- matrix(NA,dim(y)[1],dim(y)[2]-1)
for (i in 1:dim(y)[1]){
for (j in 1:(dim(y)[2]-1)) {
out3[i,j] <- y[i,j+1]-y[i,j] }}
out3
###
row <- dim(y)[1]
col <- dim(y)[2]-1
out.new <- matrix(NA, row, col)
for(i in 1:row){
for( j in 1:col){
out.new[i,j] <- y[i,j+1] - y[i,j]
}
}
out.new
# Part (d)
out4 <- y[,2:dim(y)[2]]-y[,1:(dim(y)[2]-1)]
out4
INFO <- matrix(c(1,3,NA,4,NA,2,2,2,2,2,0,-5,NA,1,4),6,5)
STUFF <- matrix(1:20,2,10)
row <- dim(INFO)[1]
col <- dim(INFO)[2]
row
col
for( i in 1:col){
min(INFO[,i])
}
row <- dim(INFO)[1]
col <- dim(INFO)[2]
M <- NULL
for( i in 1:col){
M <- c(M, min(INFO[,i]))
}
M
row <- dim(INFO)[1]
col <- dim(INFO)[2]
M <- NULL
for( i in 1:col){
M <- c(M, min(INFO[,i], na.rm = T))
}
M
row <- dim(INFO)[1]
col <- dim(INFO)[2]
M <- NULL
while( i < col){
M <- c(M, min(INFO[,i], na.rm = T))
i <- i + 1
}
M
row <- dim(INFO)[1]
col <- dim(INFO)[2]
M <- NULL
i <- 1
while( i < col){
M <- c(M, min(INFO[,i], na.rm = T))
i <- i + 1
}
M
row <- dim(INFO)[1]
col <- dim(INFO)[2]
M <- NULL
i <- 1
while( i <= col){
M <- c(M, min(INFO[,i], na.rm = T))
i <- i + 1
}
M
row <- dim(INFO)[1]
col <- dim(INFO)[2]
M <- NULL
i <- 1
negative <- F
while( i <= col){
M <- c(M, min(INFO[,i], na.rm = T))
if(min(INFO[,i], na.rm = T) < 0) {
negative <- T
}
i <- i + 1
}
M
if(negative) {
print('Some mins are below 0')
}
GET_MINS <- function(mMatrix){
row <- dim(mMatrix)[1]
col <- dim(mMatrix)[2]
M <- NULL
i <- 1
while( i <= col){
M <- c(M, min(mMatrix[,i], na.rm = T))
i <- i + 1
}
return(list(M=M))
}
GET_MINS(STUFF)
STUFF <- matrix(1:20,2,10)
GET_MINS(STUFF)
setwd("D:/GitHub/biostats721/QuizsAndPractices/midterm")
DATA1 <- read.csv('affected.csv',
stringsAsFactors=FALSE,
header=TRUE,
skip=4)
DATA2 <- read.csv('family.csv',
stringsAsFactors=FALSE,
header=TRUE,
nrow=14)
DATA1 <- read.csv('affected.csv',
stringsAsFactors=FALSE,
header=TRUE,
skip=4)
DATA2 <- read.csv('family.csv',
stringsAsFactors=FALSE,
header=TRUE,
nrow=14)
head(DATA1)
head(DATA2)
DATA3 <- merge(DATA1, DATA2, by=c('child.id' ))
dim(DATA3)
# - Function code
is.leap.year <- function(year) {
if (year%%4!=0) { out <- paste(year,'is NOT a leap year.')
} else if (year%%100==0 & year%%400!=0) {
out <- paste(year,'is NOT a leap year.')
} else {out <- paste(year,'is a leap year!')}
return(list(out=out)) }
# Part (b):
is.leap.year(1996)
x1 <- 1:5; x1
x2 <- -2:2; x2
x3 <- seq(-100,-10,by=10); x3
x4 <- matrix(c(-5:-1,1:5),2,5,byrow=T); x4
x5 <- diag(-1,3); x5
POS_SUM <- function( xVec ){
sum <- 0
row <- dim(xVec)[1]
col <- dim(xVec)[2]
for( i in 1:row){
for( j in 1:col){
if( xVec[i, j] > 0 ){
sum <- sum + xVec[i, j]
}
}
}
print( sum)
}
POS_SUM(x5)
POS_SUM(x4)
POS_SUM(x1)
dim(x1)
dim(x1) == NULL
POS_SUM <- function( xVec ){
## check if xVec is a vector
if( dim(xVec) ){
return ( list(out = sum(xVec)))
} else {
sum <- 0
row <- dim(xVec)[1]
col <- dim(xVec)[2]
for( i in 1:row){
for( j in 1:col){
if( xVec[i, j] > 0 ){
sum <- sum + xVec[i, j]
}
}
}
print( sum)
}
}
POS_SUM(x1)
POS_SUM <- function( xVec ){
## check if xVec is a vector
if( dim(xVec) = NULL ){
return ( list(out = sum(xVec)))
} else {
sum <- 0
row <- dim(xVec)[1]
col <- dim(xVec)[2]
for( i in 1:row){
for( j in 1:col){
if( xVec[i, j] > 0 ){
sum <- sum + xVec[i, j]
}
}
}
print( sum)
}
}
POS_SUM <- function( xVec ){
## check if xVec is a vector
if( is.vector(xVec) ){
return ( list(out = sum(xVec)))
} else {
sum <- 0
row <- dim(xVec)[1]
col <- dim(xVec)[2]
for( i in 1:row){
for( j in 1:col){
if( xVec[i, j] > 0 ){
sum <- sum + xVec[i, j]
}
}
}
print( sum)
}
}
POS_SUM(x1)
POS_SUM(x1)
POS_SUM(x2)
POS_SUM(x3)
POS_SUM <- function( xVec ){
## check if xVec is a vector
if( is.vector(xVec) ){
sum <- 0
for( i in 1:length(xVec)){
if(xVec[i] > 0 ){
sum <- sum + xVec[i]
}
}
return ( list(out = sum ) )
} else {
sum <- 0
row <- dim(xVec)[1]
col <- dim(xVec)[2]
for( i in 1:row){
for( j in 1:col){
if( xVec[i, j] > 0 ){
sum <- sum + xVec[i, j]
}
}
}
print( sum)
return( list(out = sum ))
}
}
POS_SUM(x1)
POS_SUM(x2)
POS_SUM(x3)
POS_SUM(x4)
POS_SUM(x5)
D1 <- read.table('Data1.txt',
stringsAsFactors = F,
header = F,
skip = 2
)
D1
D1 <- read.table('Data1.txt',
stringsAsFactors = F,
header = F,
sep = '-+'
skip = 2
)
D1
D1 <- read.table('Data1.txt',
skip = 2
stringsAsFactors = F,
header = F,
sep = '-+'
)
D1
D1 <- read.table('Data1.txt',
skip = 2
stringsAsFactors = F,
header = F,
sep = '+'
)
D1
D1 <- read.table('Data1.txt',
skip = 2
stringsAsFactors = F,
header = T,
sep = '+'
)
D1
D1 <- read.table('Data1.txt',
skip = 2
stringsAsFactors = F,
header = T,
sep = "+/-"
)
D1
D1 <- read.table('Data1.txt',
skip = 2
stringsAsFactors = F,
header = T,
sep = "+"
)
D1
D2 <- read.table('Data2.txt',
stringsAsFactors = F,
header = T,
nrow = 4
)
D1 <- read.table('Data1.txt',
skip = 2,
stringsAsFactors = F,
header = T,
sep = "+"
)
D1
D2 <- read.table('Data2.txt',
stringsAsFactors = F,
header = T,
sep = "+"
nrow = 4
)
D2 <- read.table('Data2.txt',
stringsAsFactors = F,
header = T,
sep = "+",
nrow = 4
)
D2 <- read.table('Data2.txt',
stringsAsFactors = F,
header = T,
sep = "+",
nrows = 4
)
D2 <- read.table('Data2.txt',
stringsAsFactors = F,
header = T,
sep = "+",
nrows = 3
)
D2
D3 <- read.table('Data3.txt',
stringsAsFactors = F,
header = T,
sep = "+",
##nrows = 3
)
D3
Data.m <- merge(D1, D2, by.x = c("ID", "SITE", "AGE"), by.y = c("ID", "SITE", "AGEYR"))
Data.m
Data.m <- merge(D1, D2, by.x = c("ID", "SITE"), by.y = c("ID", "SITE"))
Data.m
Data.m <- merge(D1, D2, by = c("ID", "SITE"))
Data.m
Data.m <- merge(D1, D2, by = c("ID"))
Data.m
Data.m <- samrtbin(D1, D2, by = c("ID"))
Data.m <- samrtbind(D1, D2, by = c("ID"))
Data.m <- smartbind(D1, D2, by = c("ID"))
library(gtools)
Data.m <- smartbind(D1, D2)
Data.m
Data.m2 <- merge(Data.m, D3, by = c("ID"))
Data.m2
help smartbind()
smartbind?
?
)
?smartbind
Data.m <- smartbind(D1, D2, ffill = T)
Data.m <- smartbind(D1, D2, fill = T)
Data.m
D2$AGE <- D2$AGEYR
D2$AGEYR <- NULL
Data.m <- smartbind(D1, D2, fill = T)
Data.m
## merge Data.m and D3
Data.m2 <- merge(Data.m, D3, by = c("ID"))
Data.m2
WORK <- Data.m2
WORK
Data.m2
Data.m
Data.m2 <- merge(Data.m, D3, by = c("ID", "SITE"))
Data.m2
## assign WORK
WORK <- Data.m2
WORK
length(BigUs)
BigUs <- NULL
length(BigUs)
BigUs <- NULL
count <- 0
while(length(BigUs) < 20 ){
random <- runif(1, 0, 1)
count <- count + 1
if( random > 0.9){
BigUs <- c(BigUs, random)
}
print(count)
}
## print bigus
BigUs
count
